
const documentA = `Recurrent Neural Network(RNN) is a type of Neural Network where the output from the previous step is fed as input to the current step. In traditional neural networks, all the inputs and outputs are independent of each other. Still, in cases when it is required to predict the next word of a sentence, the previous words are required and hence there is a need to remember the previous words. Thus RNN came into existence, which solved this issue with the help of a Hidden Layer. The main and most important feature of RNN is its Hidden state, which remembers some information about a sequence. The state is also referred to as Memory State since it remembers the previous input to the network. It uses the same parameters for each input as it performs the same task on all the inputs or hidden layers to produce the output. This reduces the complexity of parameters, unlike other neural networks.`;
const documentB = `RNN stands for Recurrent Neural Network. It's a type of artificial neural network designed to handle sequential data or time-series data. Unlike feedforward neural networks, which process inputs in a single direction without any feedback loops, RNNs have connections that form a directed cycle, allowing information to persist.

The key characteristic of RNNs is their ability to maintain a memory of previous inputs through hidden states. This memory enables RNNs to effectively handle sequential data by taking into account the context of past inputs when processing current inputs. Each input in a sequence is processed along with the information from previous inputs, allowing RNNs to exhibit temporal dynamic behavior.

RNNs find applications in various tasks involving sequential data, such as natural language processing (language modeling, machine translation), time series prediction, speech recognition, handwriting recognition, and more. However, traditional RNNs can suffer from issues like vanishing or exploding gradients, making it challenging for them to retain long-term dependencies in sequences.

To address some of these issues, more advanced RNN architectures like Long Short-Term Memory networks (LSTMs) and Gated Recurrent Units (GRUs) have been developed. These architectures are designed to better capture and retain long-range dependencies in sequential data by using specialized gating mechanisms.

Overall, RNNs, along with their variants like LSTMs and GRUs, have significantly contributed to the advancement of machine learning and AI, particularly in tasks involving sequential or time-dependent data.`;

const syn = {
    'allows':'allow',
    'permit':'allow',
    'permits':'allow',
    'authorize':'allow',
    'authorizing':'allow',
    'allowing':'allow',
    'section':'branch',
    'divison':'branch',
    'types' : 'branch',
    'type' : 'branch',
    'kind':'branch',
    'kinds':'branch',
    'initial':'first',
    'concentrate':'focus',
    'focused':'focus',
    'simulate':'imitate',
    'indices':'index',
    'mimc' : 'imitate',
    'extensive' : 'rich',
    'evolove':'imporve',
    'better' : 'improve',
    'prettify' : 'improve',
    'improving':'improve',
    'advances':'improve',
    'improvements':'improve',
    'created':'make',
    'create' : 'make',
    'enable' : 'make',
    'enables' : 'make',
    'solutions':'answer',
    'solution':'answer',
    'answers':'answer',
    'understand' : 'learn',
    'comprehend':'learn',
    'comprehending':'learn',
    'Networks':'network',
    'accelerate':'fast',
    'speed':'fast',
    'hurry':'fast',
    'challenges':'challenge',
    'techniques':'way',
    'technique':'way',
    'manner':'way',
    'employ':'use',
    'utilize':'use',
    'hire':'use',
    'regarding':'related',
    'actively':'active',
    'requires':'need',
    'require':'need',
    'maintaining' : 'maintain',
    'maintained' : 'maintain',
    'preserve' : 'maintain',
    'protect' : 'maintain',
    'creators':'create',
    'creates':'create',
    'creating':'create',
    'consider' : 'look',
    'considering' : 'look',
    'think' : 'look',
    'investigate' : 'look',
    'applications' : 'app',
    'application' : 'app',
    'arranging': 'order',
    'arrange': 'order',
    'appropriate' : 'suitable',
    'proper' : 'suitable',
    'convenient' : 'suitable',
    'seems':'seem',
    'provide':'give',
    'papers':'paper',
    'maximized':'high',
    'maximize':'high',
    'maximum':'high',
    'max':'high',
    'extremely':'high',
    'extreme':'high',
    'big':'high',
    'great':'high',
    'appears':'seem',
    'appear':'seem',
    'failing':'fail',
    'failed':'fail',
    'downloading':'download',
    'downloaded':'download',
    'another':'more',
    'actions':'action',
    'work':'action',
    'missing':'miss',
    'missied':'miss',
    'lost':'miss',
    'lose':'miss',
    'mismatched':'mismatch',
    'rebuilding':'rebuild',
    'category': 'classification',
    'portion': 'part',
    'segment': 'part',
    'category': 'classification',
    'tries':'try',
    'attempt':'try',
    'articles':'article',
    'behavior':'behave',
    'cultural':'culture',
    // 'cluster': 'group',
    // 'gather': 'collect',
    // 'assemble': 'collect',
    // 'unite': 'combine',
    // 'merge': 'combine',
    // 'segment': 'part',
    // 'aspect': 'facet',
    // 'played': 'play',
    // 'worked': 'work',
    // 'talked': 'talk',
    // 'created': 'create',
    // 'studied': 'study',
    // 'designed': 'design',
    // 'visited': 'visit',
    // 'cooked': 'cook',
    // 'wrote': 'write',
    // 'sang': 'sing',
    // 'danced': 'dance',
    // 'painted': 'paint',
    // 'listened': 'listen',
    // 'watched': 'watch',
    // 'opened': 'open',
    // 'closed': 'shut',
    // 'selected': 'choose',
    // 'employed': 'hire',
    // 'completed': 'finish',
    // 'arranged': 'organize',
    // 'answered': 'respond',
    // 'developed': 'evolve',
    // 'obtained': 'get',
    // 'delivered': 'transport',
    // 'constructed': 'build',
    // 'exchanged': 'swap',
    // 'altered': 'change',
    // 'requested': 'ask',
    // 'shipped': 'transport',
    // 'refunded': 'repay',
    // 'validated': 'confirm',
    // 'informed': 'notify',
    // 'repaired': 'fix',
    // 'adjusted': 'modify',
    // 'analyzed': 'examine',
    // 'expanded': 'increase',
    // 'organized': 'arrange',
    // 'secured': 'protect',
    // 'compiled': 'collect',
    // 'delegated': 'assign',
    // 'divided': 'split',
    // 'compiled': 'collect',
    // 'merged': 'combine',
    // 'restored': 'renew',
    // 'separated': 'split',
    // 'augmented': 'increase',
    // 'centralized': 'concentrate',
    // 'customized': 'modify',
     'retrieved': 'get',
     'retrieve': 'get',
    'implemented': 'create',
    'implement': 'create',
    // 'amended': 'change',
    'initiated': 'start',
     'begin': 'start',
    // 'incorporated': 'include',
    // 'optimized': 'improve',
    // 'integrated': 'combine',
    // 'streamlined': 'simplify',
    // 'standardized': 'regulate',
    // 'upgraded': 'improve',
    // 'visualized': 'imagine',
    // 'accessed': 'enter',
    // 'allocated': 'assign',
    // 'calculated': 'compute',
    // 'diagnosed': 'identify',
    // 'inspected': 'examine',
    // 'manipulated': 'handle',
    // 'overhauled': 'renovate',
    // 'synthesized': 'combine',
    // 'tested': 'check',
    // 'utilized': 'use',
    // 'engineered': 'design',
    // 'handled': 'manage',
    // 'reviewed': 'examine',
    // 'surveyed': 'examine',
    // 'experimented': 'test',
     'processed': 'handle',
     'process': 'handle',
     'processing': 'handle',
    // 'revamped': 'renovate',
    // 'composed': 'write',
    // 'authored': 'write',
    // 'devised': 'invent',
    // 'drafted': 'write',
    // 'formulated': 'create',
    // 'fabricated': 'create',
    // 'generated': 'create',
    // 'produced': 'create',
    // 'crafted': 'create',
    // 'built': 'create',
    // 'designed': 'create',
    'engineered': 'make',
    'developed': 'make',
    // 'established': 'create',
    // 'composed': 'create',
    // 'fashioned': 'create',
    // 'devised': 'create',
    // 'constructed': 'create',
    // 'shaped': 'create',
    // 'assembled': 'create',
    // 'manufactured': 'create',
    // 'realized': 'create',
    // 'spawned': 'create',
    // 'initiated': 'create',
    // 'spawned': 'create',
    // 'orchestrated': 'create',
    // 'rendered': 'create',
    // 'actualized': 'create',
    // 'schemed': 'create',
    // 'compiled': 'create',
    // 'manufactured': 'produce',
    // 'orchestrated': 'organize',
    // 'instigated': 'initiate',
    // 'sparked': 'ignite',
    // 'propelled': 'drive',
    // 'impelled': 'drive',
    // 'fueled': 'drive',
    // 'galvanized': 'motivate',
    // 'propagated': 'spread',
    // 'disseminated': 'spread',
    // 'propagated': 'spread',
    // 'fostered': 'encourage',
    // 'nurtured': 'encourage',
    // 'inculcated': 'instill',
    // 'incited': 'provoke',
    // 'enkindled': 'ignite',
    // 'ignited': 'ignite',
    // 'stirred': 'arouse',
    // 'roused': 'arouse',
    // 'awakened': 'arouse',
    // 'provoked': 'arouse',
    // 'stimulated': 'arouse',
    // 'roused': 'arouse',
    // 'prodded': 'urge',
    // 'instigated': 'incite',
    // 'induced': 'persuade',
    // 'persuaded': 'convince',
    // 'convinced': 'persuade',
    // 'compelled': 'force',
    // 'coerced': 'force',
    // 'cajoled': 'persuade',
    // 'bribed': 'influence',
    // 'manipulated': 'influence',
    // 'influenced': 'affect',
    // 'affected': 'influence',
     'impacted': 'affect',
     'influence': 'affect',
     'impact': 'affect',
    // 'transformed': 'change',
    // 'converted': 'change',
    // 'altered': 'change',
    // 'modified': 'change',
    // 'adjusted': 'change',
    // 'shifted': 'change',
    // 'transmuted': 'change',
    // 'metamorphosed': 'change',
    // 'adapted': 'adjust',
    // 'tweaked': 'adjust',
    // 'fine-tuned': 'adjust',
    // 'honed': 'improve',
    // 'enhanced': 'improve',
    // 'refined': 'improve',
    // 'upgraded': 'improve',
    // 'optimized': 'improve',
    // 'elevated': 'raise',
    // 'heightened': 'raise',
    // 'amplified': 'increase',
    // 'intensified': 'increase',
    // 'augmented': 'increase',
    // 'enlarged': 'increase',
    // 'expanded': 'increase',
    // 'extended': 'increase',
    // 'broadened': 'increase',
    // 'multiplied': 'increase',
    // 'escalated': 'increase',
    // 'accelerated': 'increase',
    // 'boosted': 'increase',
    // 'impressed': 'affect',
    // 'influenced': 'affect',
    // 'affected': 'influence',
    // 'shaped': 'influence',
    // 'molded': 'shape',
    // 'fashioned': 'shape',
    // 'formed': 'shape',
    'sculpted': 'shape',
    'created': 'make',
    'constructed': 'make',
    'built': 'make',
    'produced': 'make',
    'manufactured': 'make',
    'fabricated': 'make',
    'forged': 'make',
    'engineered': 'make',
    'developed': 'make',
    'assembled': 'make',
    'crafted': 'make',
    'making': 'make',
    // 'shaped': 'form',
    // 'molded': 'form',
    // 'fashioned': 'form',
    // 'designed': 'form',
    // 'composed': 'write',
    // 'authored': 'write',
    // 'drafted': 'write',
    // 'scribbled': 'write',
    // 'jotted': 'write',
    // 'recorded': 'write',
    // 'inscribed': 'write',
    // 'scribed': 'write',
    // 'scribed': 'write',
    // 'doodled': 'draw',
    // 'sketched': 'draw',
    // 'drew': 'draw',
    // 'illustrated': 'draw',
    // 'depicted': 'draw',
    // 'portrayed': 'draw',
    // 'rendered': 'draw',
    // 'painted': 'draw',
    // 'colored': 'paint',
    // 'tinted': 'paint',
    // 'dyed': 'paint',
    // 'pigmented': 'paint',
    // 'penciled': 'draw',
    // 'inked': 'draw',
    // 'outlined': 'draw',
    // 'traced': 'draw',
    // 'marked': 'draw',
    // 'decorated': 'adorn',
    // 'adorned': 'decorate',
    // 'embellished': 'decorate',
    // 'ornamented': 'decorate',
    // 'decked': 'decorate',
    // 'festooned': 'decorate',
    // 'garnished': 'decorate',
    // 'accessorized': 'decorate',
    // 'beautified': 'decorate',
    // 'enhanced': 'improve',
    // 'improved': 'enhance',
    // 'upgraded': 'improve',
    // 'refined': 'improve',
    // 'polished': 'improve',
    // 'honed': 'sharpen',
    // 'sharpened': 'hone',
    // 'fine-tuned': 'adjust',
    // 'tweaked': 'adjust',
    // 'calibrated': 'adjust',
    // 'regulated': 'adjust',
    // 'standardized': 'regulate',
    // 'systematized': 'organize',
    // 'organized': 'arrange',
    // 'arranged': 'organize',
    // 'sorted': 'arrange',
    // 'categorized': 'classify',
    // 'classified': 'categorize',
    // 'grouped': 'organize',
    // 'clustered': 'group',
    // 'batched': 'group',
    // 'cataloged': 'list',
    // 'indexed': 'list',
    // 'recorded': 'list',
    // 'logged': 'record',
    // 'registered': 'record',
    // 'documented': 'record',
    // 'reported': 'inform',
    // 'notified': 'inform',
    // 'informed': 'notify',
    // 'alerted': 'warn',
    // 'cautioned': 'warn',
    // 'advised': 'warn',
    // 'notified': 'warn',
    // 'sounded the alarm': 'warn',
    // 'raised the alarm': 'warn',
    // 'warned': 'alert',
    // 'admonished': 'reprimand',
    // 'reprimanded': 'admonish',
    // 'scolded': 'reprimand',
    // 'rebuked': 'reprimand',
    // 'chastised': 'reprimand',
    // 'berated': 'reprimand',
    // 'reproved': 'reprimand',
    // 'reproached': 'reprimand',
    // 'reproven': 'reprimand',
    // 'upbraided': 'reprimand',
    // 'faceted': 'facet',
    // 'participated': 'participate',
    // 'studied': 'study',
    // 'examined': 'examine',
    // 'explored': 'explore',
    // 'reviewed': 'review',
    // 'surveyed': 'survey',
    // 'synthesized': 'synthesize',
    // 'organized': 'organize',
    // 'categorized': 'categorize',
    // 'grouped': 'group',
    // 'dissected': 'dissect',
    // 'analyzed': 'analyze',
    // 'scrutinized': 'scrutinize',
    // 'scrutinised': 'scrutinize', // UK spelling
    // 'investigated': 'investigate',
    // 'scrutinized': 'scrutinize',
    // 'inspected': 'inspect',
    // 'checked': 'check',
    // 'verified': 'verify',
    // 'confirmed': 'confirm',
}


const dummySet = new Set([
    'a','an','the',
    'and', 'also',
    'are','is', 'was','were',
    'them','this',
    'you', 'be', 'which',
    'he','she','it','i', 'we', 'they',
    'from','with','or',
    'on','to','at','in','of','by','for','out',
    'my','his','its','their',
    'has','have',
    'do' , 'dose', 'but','doing','don’t','dosen’t','any',
    'there','there\'s','about', 'what\'s',
    'becaues', 'as','as a result','since',
    'not','only','been',
    'if','whereas','whether',
    'can','would', 'could',
    'that','just','using','especially','that\'s','you\'ll','we\'ll',
    'once','very','many','used','both','more','than','well','highly','where','each',
    'when','who','some','such','over','globally',
    'me','us','mine', 'among','told','no','yes','i’m','back','inside',
    'after','before','will','all',
    'don\'t', 'you\'re','every','like',
    'isn\'t','what','your','you\'ve','towards','holds','it\'s','into','how',
    'lies','up','down','then','these','beyond','behind','being','across','able','upon','still','overall','usually','so','might','together','other','between','may'
  ]
  )
  
function tokenize(text) {
    text =text.toLowerCase().split(/[^a-z_]+/).filter(Boolean);
    text = text.filter(token=>!dummySet.has(token))
    text=text.map(token=> syn[token] ? syn[token] : token)
    return text
}

function calculateIDF(term, documents) {
    const documentsContainingTerm = documents.filter(document => tokenize(document).includes(term));
    const inverseDocumentFrequency = Math.log(documents.length / documentsContainingTerm.length + 1);
    return inverseDocumentFrequency;
}

function calculateTF(term, document) {
    const terms = tokenize(document);
    const termCount = terms.filter(t => t === term).length;
    const termFrequency = termCount / terms.length;
    return termFrequency;
}

function calculateTFIDF(document, documents) {
    const terms = tokenize(document);
    const tfidf = {};
    terms.forEach(term => {
      const tf = calculateTF(term, document);
      const idf = calculateIDF(term, documents);
      tfidf[term] = tf * idf;
    });
    return tfidf;
  }

const documents = [documentA, documentB];
const tfidfA = calculateTFIDF(documentA, documents);
const tfidfB = calculateTFIDF(documentB, documents);
// Function to compute cosine similarity between two TF-IDF vectors
function cosineSimilarity(vectorA, vectorB) {
    const dotProduct = Object.keys(vectorA).reduce((acc, term) => {
      return acc + (vectorA[term] * vectorB[term] || 0);
    }, 0);
  
    const magA = Math.sqrt(Object.values(vectorA).reduce((acc, val) => acc + val * val, 0));
    const magB = Math.sqrt(Object.values(vectorB).reduce((acc, val) => acc + val * val, 0));
  
    if (magA === 0 || magB === 0) {
      return 0; // To handle division by zero error
    }
  
    return ((dotProduct / (magA * magB)) * 100);
  }

const similarity = cosineSimilarity(tfidfA, tfidfB);

console.log(similarity)
